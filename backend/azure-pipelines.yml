version: 0.2

phases:
  install:
    commands:
      - echo "Installing Azure CLI"
      - pip install azure-cli

      - echo "Installing terraform"
      # Install Terraform
      - curl -O https://releases.hashicorp.com/terraform/1.5.2/terraform_1.5.2_linux_amd64.zip
      - unzip terraform_1.5.2_linux_amd64.zip
      - sudo mv terraform /usr/local/bin/
      - terraform version

       # Adding mongo connection string
      - cd backend
      - MONGO_CONN_STR=$(aws ssm get-parameter --name mongo-dev --with-decryption --query "Parameter.Value" --output text)
      - echo "$MONGO_CONN_STR" > mongo.dev.conf

      # Adding azure connection string
      - cd central
      - mkdir -p central_storage/tmp
      - cd central_storage/tmp
      - CONN_STR=$(aws ssm get-parameter --name azure-con-str --with-decryption --query "Parameter.Value" --output text)
      - echo "$CONN_STR" > az_blob_connection_str.json
      - cd ../../../db_service/azure_blob
      - mkdir -p azure_blob_storage/tmp
      - cd azure_blob_storage/tmp
      - echo "$CONN_STR" > az_blob_connection_str.json
      - cd ../../../../
      - cd model_service/azure_cog
      - mkdir -p azure_cog_storage/tmp
      - cd azure_cog_storage/tmp
      - echo "$CONN_STR" > api.conf.json
      - cat api.conf.json
      - ls
      - cd ../../../../


  pre_build:
    commands:
      - echo "Executing pre-build commands..."
      - az login --service-principal --username $AZURE_CLIENTID --password $AZURE_PASSWORD --tenant $AZURE_TENANTID
    
      - REPO_EXISTS=$(az acr repository show --name xaicontainerregistry --repository backendevaluationservice > /dev/null 2>&1; echo $?)
      - if [ $REPO_EXISTS -eq 0 ]; then az acr repository show-tags --name xaicontainerregistry --repository backendevaluationservice --output tsv --query "length(@)" | (read -r LEN; if [ "$LEN" -gt 0 ]; then az acr repository delete --name xaicontainerregistry --image backendevaluationservice:latest --yes; fi); fi

      - REPO_EXISTS=$(az acr repository show --name xaicontainerregistry --repository backendrestnet50 > /dev/null 2>&1; echo $?)
      - if [ $REPO_EXISTS -eq 0 ]; then az acr repository show-tags --name xaicontainerregistry --repository backendrestnet50 --output tsv --query "length(@)" | (read -r LEN; if [ "$LEN" -gt 0 ]; then az acr repository delete --name xaicontainerregistry --image backendrestnet50:latest --yes; fi); fi

      - REPO_EXISTS=$(az acr repository show --name xaicontainerregistry --repository backendazurecog > /dev/null 2>&1; echo $?)
      - if [ $REPO_EXISTS -eq 0 ]; then az acr repository show-tags --name xaicontainerregistry --repository backendazurecog --output tsv --query "length(@)" | (read -r LEN; if [ "$LEN" -gt 0 ]; then az acr repository delete --name xaicontainerregistry --image backendazurecog:latest --yes; fi); fi

      - REPO_EXISTS=$(az acr repository show --name xaicontainerregistry --repository backendazureblob > /dev/null 2>&1; echo $?)
      - if [ $REPO_EXISTS -eq 0 ]; then az acr repository show-tags --name xaicontainerregistry --repository backendazureblob --output tsv --query "length(@)" | (read -r LEN; if [ "$LEN" -gt 0 ]; then az acr repository delete --name xaicontainerregistry --image backendazureblob:latest --yes; fi); fi

      - REPO_EXISTS=$(az acr repository show --name xaicontainerregistry --repository backendazurecog > /dev/null 2>&1; echo $?)
      - if [ $REPO_EXISTS -eq 0 ]; then az acr repository show-tags --name xaicontainerregistry --repository backendazurecog --output tsv --query "length(@)" | (read -r LEN; if [ "$LEN" -gt 0 ]; then az acr repository delete --name xaicontainerregistry --image backendazurecog:latest --yes; fi); fi
      
      - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
      - az acr login --name xaicontainerregistry

  build:
    commands:
      - echo "Building the project..."
      - docker compose build
      - docker image ls
      - docker tag backend-central xaicontainerregistry.azurecr.io/backendcentral
      - docker push xaicontainerregistry.azurecr.io/backendcentral
      - ls
      
      - cd backend/terraform/azure
      - terraform apply -var "azure_client_id=$AZURE_CLIENTID" -var "azure_password=$AZURE_PASSWORD" -var "azure_tenant_id=$AZURE_TENANTID" -var "os_image_password=$OS_IMAGE_PASSWORD" -var "subscription_id=$AZURE_SUBSCRIPTIONID" -var "registry_password=$REGISTRY_PASSWORD" --auto-approve



  post_build:
    commands:
      - echo "Application deployed!"

artifacts:
  files:
    - '**/*'
